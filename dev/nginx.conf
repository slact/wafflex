#!/bin/sh #good enough highlighting
#load_module "nginx-nchan/pkg/nginx-nchan-dev/etc/nginx/modules/ngx_nchan_module.so";
#user  nobody;
worker_processes      20;
working_directory     /tmp;

worker_rlimit_core    1024M;
worker_rlimit_nofile  100000;
#debug_points stop;

error_log             /dev/stderr;

pid                   /tmp/nchan-test-nginx.pid;
daemon                off;


events {
  worker_connections  50000;
  accept_mutex on;
}

http {
  access_log /dev/stdout;
#  access_log /dev/stdout;
  default_type  application/octet-stream;
  client_body_temp_path /tmp/ 1 2;
  sendfile        on;
  keepalive_timeout  65;
  client_max_body_size 100m;
  #client_body_in_file_only clean;
  #client_body_buffer_size 32K;
  
  #cachetag
  
  init_worker_by_lua_block {
    local ipc = require "ngx.ipc"
    
    ipc.receive({
      hello = function(data)
        ngx.log(ngx.ALERT, ("%d says %s"):format(ipc.sender, data))
        ipc.reply("reply", ("kthx (you said %s)"):format(data))
      end,
      check_long = function(data)
        ngx.log(ngx.ALERT, ("%d got alert of length %d"):format(ipc.sender, #data))
        
        local i = 1
        for n in data:gmatch("%d+") do
          if tonumber(n) ~= i then
            ngx.log(ngx.ERR, ("long alert doesn't check out at number %d (saw %s)"):format(i, n))
            return
          end
          i = i + 1
        end
        
        ngx.log(ngx.ALERT, "long alert checks out")
        
        ipc.reply("reply", ("kthx"))
      end,
      reply = function(data)
        ngx.log(ngx.ALERT, ("%d has replied %s"):format(ipc.sender, data))
      end,
      benchmark_ping = function(data)
        if ipc.sender ~= ngx.worker.pid() then
          ipc.reply("benchmark_pong", data)
        end
      end,
      largemsg = function(data)
        local sz = #data
        print("got large msg from " .. ipc.sender .. ", length: " ..  sz .. "bytes.")
      end
    })
  }
  
  server {
    listen       8082;
    listen       8085   http2;
    #listen      18010;
    #    root ./;
    
    location ~ /send/(\d+)/(.*)$ {
      set $dst_pid $1;
      set $data $2;
      content_by_lua_block {
        local ipc = require "ngx.ipc"
        local ok, err = ipc.send(ngx.var.dst_pid, "hello", ngx.var.data)
        if ok then
          ngx.say("Sent alert to pid " .. ngx.var.dst_pid);
        else
          ngx.status = 500
          ngx.say(err)
        end
      }
    }
    
    location ~ /send/any/(.*)$ {
      set $data $1;
      content_by_lua_block {
        local ipc = require "ngx.ipc"
        local dst_pid = ipc.get_other_worker_pids()[1]
        local ok, err = ipc.send(dst_pid, "hello", ngx.var.data)
        if ok then
          ngx.say("Sent alert to pid " .. dst_pid);
        else
          ngx.status = 500
          ngx.say(err)
        end
      }
    }
    
    location ~ /send/flood/(\d+)$ {
      set $n $1;
      content_by_lua_block {
        local ipc = require "ngx.ipc"
        local dst_pid = ipc.get_other_worker_pids()[1]
        ipc.send(dst_pid, "flood_test", "start")
        for i=0, tonumber(ngx.var.n) do
          ipc.send(dst_pid, "flood_test", tostring(i))
        end
        if ok then
          ngx.say("Sent " .. ngx.var.n .. " alerts to pid " .. dst_pid)
        else
          ngx.status = 500
          ngx.say(err)
        end
      }
    }
    
    location ~ /send/long/(\d+)$ {
      set $n $1;
      content_by_lua_block {
        local n = tonumber(ngx.var.n)
        local ipc = require "ngx.ipc"
        local dst_pid = ipc.get_other_worker_pids()[1]
        local t = {}
        for i=1,n do
          t[i]=tostring(i)
        end
        local str = table.concat(t, " ")
        
        local ok, err = ipc.send(dst_pid, "check_long", str)
        if ok then
          ngx.say("Sent alert to pid " .. dst_pid);
        else
          ngx.status = 500
          ngx.say(err)
        end
      }
    }
    
    location ~ /pids$ {
      content_by_lua_block {
        local ipc = require "ngx.ipc"
        print(table.concat(ipc.get_other_worker_pids(), " "))
      }
    }
    
    location ~ /large/(\d+)$ {
      set $len $1;
      content_by_lua_block {
        local ipc = require "ngx.ipc"
        local len = ngx.var.len
        local count = 0
        local enough = 1
        ipc.receive("largemsg-pong", function(data)
          count = count + 1
          print("got largemsg-pong")
          if count < enough then
            ipc.reply("largemsg", data)
          else
            print("enough!!")
          end
        end)
        local dst_pid = ipc.get_other_worker_pids())[1]
        local ok, err = ipc.send((dst_pid, "largemsg", ("ab"):rep(len/2))
        if ok then
          ngx.say("Sent alert (size " .. len .. ") to pid " .. dst_pid);
        else
          ngx.status = 500
          ngx.say(err)
        end
        
      }
    }
    
    location = /broadcast_bench {
      content_by_lua_block {
        local ipc = require "ngx.ipc"
        local count = 0
        local enough = 1000000
        local extra_bytes = 0
        ipc.receive("benchmark_pong", function(data)
          count = count + 1
          if count >= enough then
            ngx.update_time()
            print(("got %d responses after %f sec (now: %f)"):format(count, ngx.now() -tonumber(data:match("%S+")), ngx.now()))
          else
            --print("count is" .. count)
            ipc.reply("benchmark_ping", data)
          end
        end)
        ngx.update_time()
        local msg = ("%f %s"):format(ngx.now(), ("b"):rep(extra_bytes));
        print("start at " ..  ngx.now() .. " len: " .. #msg)
        
        local ok, err = ipc.broadcast("benchmark_ping", msg)
        if ok then
          ngx.say("Benchmark begin.");
        else
          ngx.status = 500
          ngx.say(err)
        end
      }
    }
    
    location = /broadcast_debug {
      content_by_lua_block {
        local ipc = require "ngx.ipc"
        local count = 0
        local enough = 3
        local len = 70000
        ipc.receive("bdb-pong", function(data)
          count = count + 1
          if count >= enough then
            print("it's over")
          else
            print("count is " .. count)
            ipc.reply("benchmark_ping", data)
          end
        end)
        local msg = ("%f %s"):format(ngx.now(), ("b"):rep(extra_bytes));
        print("start at " ..  ngx.now() .. " len: " .. #msg)
        
        local ok, err = ipc.broadcast("bdb-ping", msg)
        if ok then
          ngx.say("Benchmark begin.");
        else
          ngx.status = 400
          ngx.say(err)
        end
        
      }
    }
    
    location ~ /broadcast/(.*)$ {
      set $data $1;
      content_by_lua_block {
        local ipc = require "ngx.ipc"
        local ok, err = ipc.broadcast("hello", ngx.var.data)
        if ok then
          ngx.say("Benchmark begin.");
        else
          ngx.status = 500
          ngx.say(err)
        end
      }
    }
    
  }
}
